name: Release and Deploy

# 此 workflow 包含完整的 CI/CD 流程
# CI: 构建二进制文件并创建 GitHub Release
# CD: 自动部署到服务器（默认禁用，推荐使用 Webhook 方式）
#
# 推荐部署方式：
# 1. GitHub Release 创建后，会自动触发配置好的 Webhook
# 2. 服务器上的 webhook-server.py 接收通知并自动部署
# 3. 无需在此 workflow 中配置部署逻辑
#
# 参考文档：
# - WEBHOOK_SETUP.md: Webhook 配置指南
# - AUTO_DEPLOY_GUIDE.md: 部署方案对比

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          GIT_COMMIT=$(git rev-parse --short HEAD)

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "git_commit=$GIT_COMMIT" >> $GITHUB_OUTPUT

          echo "📦 Version: $VERSION"
          echo "⏰ Build Time: $BUILD_TIME"
          echo "🔖 Git Commit: $GIT_COMMIT"

      - name: Build binaries
        env:
          VERSION: ${{ steps.version.outputs.version }}
          BUILD_TIME: ${{ steps.version.outputs.build_time }}
          GIT_COMMIT: ${{ steps.version.outputs.git_commit }}
        run: |
          echo "🔨 Building binaries..."

          # Build for Linux AMD64
          GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT}" \
            -o simple-go-app-linux-amd64 .

          # Make binary executable
          chmod +x simple-go-app-linux-amd64

          # Show file info
          ls -lh simple-go-app-*

          echo "✅ Build completed"

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Release ${{ steps.version.outputs.version }}

            ### 📦 Built Artifacts
            - `simple-go-app-linux-amd64` - Linux AMD64

            ### 📝 Build Info
            - **Version:** ${{ steps.version.outputs.version }}
            - **Build Time:** ${{ steps.version.outputs.build_time }}
            - **Git Commit:** ${{ steps.version.outputs.git_commit }}

            ### 📥 Installation
            ```bash
            # Download binary
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/simple-go-app-linux-amd64

            # Make executable
            chmod +x simple-go-app-linux-amd64

            # Run
            ./simple-go-app-linux-amd64
            ```

            ### 🚀 Auto Deploy
            This release will be automatically deployed to configured servers via webhook.
          draft: false
          prerelease: false
          files: simple-go-app-linux-amd64

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 自动部署配置说明
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  #
  # 本项目使用 GitHub Webhook 实现自动部署，无需在 workflow 中配置部署逻辑。
  #
  # 配置步骤：
  #
  # 1. 在服务器上安装 webhook-server：
  #    curl -sSL https://raw.githubusercontent.com/flywheel-research/simple-go-app/main/install-webhook-server.sh | sudo bash
  #
  # 2. 在 GitHub 配置 Webhook：
  #    Repository → Settings → Webhooks → Add webhook
  #    - Payload URL: http://your-server:9666/webhook
  #    - Content type: application/json
  #    - Secret: (webhook secret)
  #    - Events: ✓ Releases only
  #
  # 3. 工作流程：
  #    - 推送 tag → GitHub Actions 构建 → 创建 Release
  #    - GitHub 触发 Webhook → 服务器接收通知
  #    - webhook-server.py 调用 deploy.sh
  #    - 从 GitHub Release 下载二进制并部署
  #
  # 参考文档：
  # - WEBHOOK_SETUP.md - Webhook 完整配置指南
  # - QUICK_START.md - 快速开始指南
  # - README.md - 完整项目文档
